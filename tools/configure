#!/usr/bin/env bash
#
# AMF configure script
#
# Copyright (c) 2025 Laky-64
#

CMDLINE_SET="
  toolchain
  prefix
"

CMDLINE_SELECT="
  pic
  static
  shared
"

set_all(){
    value=$1
    shift
    for var in "$@"; do
        eval "$var"="$value"
    done
}

enable(){
  set_all yes "$@"
}

disable(){
  set_all no "$@"
}

enabled(){
  test "${1#!}" = "$1" && op="=" || op="!="
  eval test "x\$${1#!}" $op "xyes"
}

disabled(){
  test "${1#!}" = "$1" && op="=" || op="!="
  eval test "x\$${1#!}" $op "xno"
}

is_in(){
    value=$1
    shift
    for var in "$@"; do
        [ "$var" = "$value" ] && return 0
    done
    return 1
}

append(){
    var=$1
    shift
    eval "$var=\"\$$var $*\""
}

add_cppflags(){
    append CPPFLAGS "$@"
}

enable_weak_pic() {
    disabled pic && return
    enable pic
    add_cppflags -fPIC
}

# toolchain
ar_default="ar"
cxx_default="g++"
prefix="amfbuild"

for opt do
    optval="${opt#*=}"
    case "$opt" in
      --enable-?*|--disable-?*)
        eval "$(echo "$opt" | sed 's/--/action=/;s/-/ option=/;s/-/_/g')"
        if is_in $option $COMPONENT_LIST; then
            test $action = disable && action=unset
            eval $action \$$(toupper ${option%s})_LIST
        elif is_in $option $CMDLINE_SELECT; then
            $action $option
        else
          echo "Unknown option --$action-$option"
          exit 1
        fi
      ;;
      *)
        optname="${opt%%=*}"
        optname="${optname#--}"
        optname=$(echo "$optname" | sed 's/-/_/g')
        if is_in $optname $CMDLINE_SET; then
          eval "$optname"='$optval'
        else
          echo "Unknown option $optname"
          exit 1
        fi
      ;;
    esac
done

enabled pic && enable_weak_pic

case "$toolchain" in
  clang-*)
    cxx_default="clang++"
  ;;
  gcc-*)
    cxx_default="g++"
  ;;
  msvc)
    cl_major_ver=$(cl.exe 2>&1 | sed -n 's/.*Version \([[:digit:]]\{1,\}\)\..*/\1/p')
    if [ -z "$cl_major_ver" ] || [ $cl_major_ver -ge 18 ]; then
        cxx_default="cl.exe"
    else
        echo "Unsupported MSVC version (2013 or newer required)"
        exit 1
    fi
    ar_default="lib.exe"
  ;;
  ?*)
    echo "Unknown toolchain $toolchain"
    exit 1
  ;;
esac

AMF_ROOT_DIR=amf
OBJDIR="$prefix/obj"

mkdir -p $prefix
mkdir -p $prefix/lib/

LIB_NAME="libamf"
LIB_TYPE="shared"
if enabled shared; then
    LIB_NAME="$LIB_NAME.so"
else
    LIB_NAME="$LIB_NAME.a"
    LIB_TYPE="static"
fi

cat > "config.mak" <<EOF
AMF_ROOT_DIR = $AMF_ROOT_DIR
OBJDIR = $OBJDIR
PREFIX_DIR = $prefix

INCLUDES = -I\$(AMF_ROOT_DIR)
SOURCES = \\
    \$(AMF_ROOT_DIR)/public/common/AMFFactory.cpp \\
    \$(AMF_ROOT_DIR)/public/common/AMFSTL.cpp \\
    \$(AMF_ROOT_DIR)/public/common/DataStreamFactory.cpp \\
    \$(AMF_ROOT_DIR)/public/common/DataStreamFile.cpp \\
    \$(AMF_ROOT_DIR)/public/common/DataStreamMemory.cpp \\
    \$(AMF_ROOT_DIR)/public/common/Thread.cpp \\
    \$(AMF_ROOT_DIR)/public/common/TraceAdapter.cpp \\
    \$(AMF_ROOT_DIR)/public/common/Linux/ThreadLinux.cpp

CXXFLAGS = ${CPPFLAGS} -std=c++17 -O2 \$(INCLUDES)
AR = $ar_default
CXX = ${cxx_default}
LDFLAGS =
LIB_OUTPUT = $prefix/lib/$LIB_NAME
LIB_TYPE = $LIB_TYPE
EOF